{"name": "test_reservar_dois_livros_disponíveis", "status": "failed", "statusDetails": {"message": "AssertionError: Erro ao reservar livros: {\"code\":\"1200\",\"message\":\"User not authorized!\"}\nassert 401 == 201\n +  where 401 = <Response [401]>.status_code\n +    where <Response [401]> = pytest.response", "trace": "fixturefunc = <function verify_books_reserved at 0x102bc9b20>, request = <FixtureRequest for <Function test_reservar_dois_livros_disponíveis>>, kwargs = {}\n\n    def call_fixture_func(\n        fixturefunc: _FixtureFunc[FixtureValue], request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n.venv/lib/python3.13/site-packages/_pytest/fixtures.py:898: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\n    @then(\"a API deve confirmar a reserva dos livros\")\n    def verify_books_reserved():\n        \"\"\"Verifica se a API confirmou a reserva\"\"\"\n>       assert pytest.response.status_code == 201, f\"Erro ao reservar livros: {pytest.response.text}\"\nE       AssertionError: Erro ao reservar livros: {\"code\":\"1200\",\"message\":\"User not authorized!\"}\nE       assert 401 == 201\nE        +  where 401 = <Response [401]>.status_code\nE        +    where <Response [401]> = pytest.response\n\ntests/api/test_reservation.py:42: AssertionError"}, "description": "/Users/daniloamedeiros/Desktop/project-challenge-qa-acc/features/api_reservation.feature: Reservar dois livros disponíveis", "attachments": [{"name": "log", "source": "9b6304f7-84a4-4cbd-b421-8aab98658c18-attachment.txt", "type": "text/plain"}], "start": 1739369567745, "stop": 1739369569452, "uuid": "870ced76-fb8f-4ffc-975e-f75ebf99335e", "historyId": "91b126e08702aa1dbb177c0c6adc4a30", "testCaseId": "91b126e08702aa1dbb177c0c6adc4a30", "fullName": "tests.api.test_reservation#test_reservar_dois_livros_disponíveis", "labels": [{"name": "parentSuite", "value": "tests.api"}, {"name": "suite", "value": "test_reservation"}, {"name": "host", "value": "MacBook-Pro-de-Danilo.local"}, {"name": "thread", "value": "50907-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.api.test_reservation"}]}