{"name": "test_reservar_dois_livros_dispon√≠veis", "status": "failed", "statusDetails": {"message": "AssertionError: Erro: Usu√°rio n√£o encontrado antes da reserva! {\"code\":\"1200\",\"message\":\"User not authorized!\"}\nassert 401 == 200\n +  where 401 = <Response [401]>.status_code", "trace": "fixturefunc = <function ensure_authentication at 0x102ebbce0>, request = <FixtureRequest for <Function test_reservar_dois_livros_dispon√≠veis>>, kwargs = {}\n\n    def call_fixture_func(\n        fixturefunc: _FixtureFunc[FixtureValue], request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n.venv/lib/python3.13/site-packages/_pytest/fixtures.py:898: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\n    @given(\"que estou autenticado na API\")\n    def ensure_authentication():\n        \"\"\"Garante que o usu√°rio est√° autenticado e autorizado\"\"\"\n        logging.debug(f\"üîê Verificando autentica√ß√£o do usu√°rio... ID: {pytest.user_id}, Token: {pytest.token}\")\n    \n        auth_response = APIClient.is_user_authorized(pytest.user_data[\"userName\"], pytest.user_data[\"password\"])\n        assert auth_response.status_code == 200, f\"Erro: Usu√°rio n√£o est√° autorizado! {auth_response.text}\"\n    \n        # üöÄ **Verifica se o usu√°rio realmente existe antes da reserva**\n        user_details = APIClient.get_user_details(pytest.user_id, pytest.token)\n    \n        # **Se a API retornar erro 401, tentamos gerar um novo token**\n        if user_details.status_code == 401:\n            logging.debug(\"üîÑ Tentando regenerar token antes de verificar usu√°rio...\")\n            new_token_response = APIClient.generate_token(pytest.user_data[\"userName\"], pytest.user_data[\"password\"])\n            assert new_token_response.status_code == 200, f\"Erro ao gerar novo token: {new_token_response.text}\"\n    \n            new_token = new_token_response.json().get(\"token\")\n            assert new_token is not None, \"Erro: API n√£o retornou um novo token v√°lido!\"\n    \n            pytest.token = new_token\n            logging.debug(f\"‚úÖ Novo Token Gerado: {pytest.token}\")\n    \n            # **Verifica os detalhes do usu√°rio novamente com o novo token**\n            user_details = APIClient.get_user_details(pytest.user_id, pytest.token)\n    \n>       assert user_details.status_code == 200, f\"Erro: Usu√°rio n√£o encontrado antes da reserva! {user_details.text}\"\nE       AssertionError: Erro: Usu√°rio n√£o encontrado antes da reserva! {\"code\":\"1200\",\"message\":\"User not authorized!\"}\nE       assert 401 == 200\nE        +  where 401 = <Response [401]>.status_code\n\ntests/api/test_reservation.py:36: AssertionError"}, "description": "/Users/daniloamedeiros/Desktop/project-challenge-qa-acc/features/api_reservation.feature: Reservar dois livros dispon√≠veis", "attachments": [{"name": "log", "source": "c6172286-3cf7-4e70-8886-e71942710a7a-attachment.txt", "type": "text/plain"}], "start": 1739369912175, "stop": 1739369915254, "uuid": "da952475-e181-415f-9f7c-79551bba6fcd", "historyId": "91b126e08702aa1dbb177c0c6adc4a30", "testCaseId": "91b126e08702aa1dbb177c0c6adc4a30", "fullName": "tests.api.test_reservation#test_reservar_dois_livros_dispon√≠veis", "labels": [{"name": "parentSuite", "value": "tests.api"}, {"name": "suite", "value": "test_reservation"}, {"name": "host", "value": "MacBook-Pro-de-Danilo.local"}, {"name": "thread", "value": "51005-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.api.test_reservation"}]}