{"name": "test_deletar_todos_os_registros", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.StaleElementReferenceException: Message: stale element reference: stale element not found in the current frame\n  (Session info: chrome=133.0.6943.54); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#stale-element-reference-exception\nStacktrace:\n0   chromedriver                        0x0000000100c1abac cxxbridge1$str$ptr + 2724820\n1   chromedriver                        0x0000000100c1320c cxxbridge1$str$ptr + 2693684\n2   chromedriver                        0x0000000100779afc cxxbridge1$string$len + 93348\n3   chromedriver                        0x000000010077f808 cxxbridge1$string$len + 117168\n4   chromedriver                        0x0000000100781b64 cxxbridge1$string$len + 126220\n5   chromedriver                        0x0000000100802960 cxxbridge1$string$len + 654088\n6   chromedriver                        0x0000000100801b94 cxxbridge1$string$len + 650556\n7   chromedriver                        0x00000001007b4ba0 cxxbridge1$string$len + 335176\n8   chromedriver                        0x0000000100be3664 cxxbridge1$str$ptr + 2498188\n9   chromedriver                        0x0000000100be6978 cxxbridge1$str$ptr + 2511264\n10  chromedriver                        0x0000000100bc8d04 cxxbridge1$str$ptr + 2389292\n11  chromedriver                        0x0000000100be7220 cxxbridge1$str$ptr + 2513480\n12  chromedriver                        0x0000000100bb9cec cxxbridge1$str$ptr + 2327828\n13  chromedriver                        0x0000000100c038d4 cxxbridge1$str$ptr + 2629884\n14  chromedriver                        0x0000000100c03a5c cxxbridge1$str$ptr + 2630276\n15  chromedriver                        0x0000000100c12e80 cxxbridge1$str$ptr + 2692776\n16  libsystem_pthread.dylib             0x0000000195ecc2e4 _pthread_start + 136\n17  libsystem_pthread.dylib             0x0000000195ec70fc thread_start + 8", "trace": "fixturefunc = <function deletar_todos_registros at 0x10765b240>, request = <FixtureRequest for <Function test_deletar_todos_os_registros>>\nkwargs = {'web_tables_page': <pages.web_tables_page.WebTablesPage object at 0x107708ad0>}\n\n    def call_fixture_func(\n        fixturefunc: _FixtureFunc[FixtureValue], request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n.venv/lib/python3.13/site-packages/_pytest/fixtures.py:898: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests/ui/test_web_tables.py:35: in deletar_todos_registros\n    web_tables_page.delete_all_records()\npages/web_tables_page.py:54: in delete_all_records\n    self.driver.execute_script(\"arguments[0].scrollIntoView(true);\", button)\n.venv/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:528: in execute_script\n    return self.execute(command, {\"script\": script, \"args\": converted_args})[\"value\"]\n.venv/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:429: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x10770a900>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"stale element reference\",\"message\":\"stale element reference: stale elemen...000195ecc2e4 _pthread_start + 136\\\\n17  libsystem_pthread.dylib             0x0000000195ec70fc thread_start + 8\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.StaleElementReferenceException: Message: stale element reference: stale element not found in the current frame\nE         (Session info: chrome=133.0.6943.54); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#stale-element-reference-exception\nE       Stacktrace:\nE       0   chromedriver                        0x0000000100c1abac cxxbridge1$str$ptr + 2724820\nE       1   chromedriver                        0x0000000100c1320c cxxbridge1$str$ptr + 2693684\nE       2   chromedriver                        0x0000000100779afc cxxbridge1$string$len + 93348\nE       3   chromedriver                        0x000000010077f808 cxxbridge1$string$len + 117168\nE       4   chromedriver                        0x0000000100781b64 cxxbridge1$string$len + 126220\nE       5   chromedriver                        0x0000000100802960 cxxbridge1$string$len + 654088\nE       6   chromedriver                        0x0000000100801b94 cxxbridge1$string$len + 650556\nE       7   chromedriver                        0x00000001007b4ba0 cxxbridge1$string$len + 335176\nE       8   chromedriver                        0x0000000100be3664 cxxbridge1$str$ptr + 2498188\nE       9   chromedriver                        0x0000000100be6978 cxxbridge1$str$ptr + 2511264\nE       10  chromedriver                        0x0000000100bc8d04 cxxbridge1$str$ptr + 2389292\nE       11  chromedriver                        0x0000000100be7220 cxxbridge1$str$ptr + 2513480\nE       12  chromedriver                        0x0000000100bb9cec cxxbridge1$str$ptr + 2327828\nE       13  chromedriver                        0x0000000100c038d4 cxxbridge1$str$ptr + 2629884\nE       14  chromedriver                        0x0000000100c03a5c cxxbridge1$str$ptr + 2630276\nE       15  chromedriver                        0x0000000100c12e80 cxxbridge1$str$ptr + 2692776\nE       16  libsystem_pthread.dylib             0x0000000195ecc2e4 _pthread_start + 136\nE       17  libsystem_pthread.dylib             0x0000000195ec70fc thread_start + 8\n\n.venv/lib/python3.13/site-packages/selenium/webdriver/remote/errorhandler.py:232: StaleElementReferenceException"}, "description": "/Users/daniloamedeiros/Desktop/project-challenge-qa-acc/features/ui_web_tables.feature: Deletar todos os registros", "start": 1739407443186, "stop": 1739407453757, "uuid": "298aa1fe-1801-4574-bd67-4495f92bba74", "historyId": "1c4d4067be6feb569f1d2bfdbf9be019", "testCaseId": "1c4d4067be6feb569f1d2bfdbf9be019", "fullName": "tests.ui.test_web_tables#test_deletar_todos_os_registros", "labels": [{"name": "parentSuite", "value": "tests.ui"}, {"name": "suite", "value": "test_web_tables"}, {"name": "host", "value": "MacBook-Pro-de-Danilo.local"}, {"name": "thread", "value": "63248-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.ui.test_web_tables"}]}