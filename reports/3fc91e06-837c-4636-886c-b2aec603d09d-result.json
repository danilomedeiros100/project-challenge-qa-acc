{"name": "test_reservar_dois_livros_disponíveis", "status": "failed", "statusDetails": {"message": "AssertionError: Erro: Usuário não encontrado antes da reserva! {\"code\":\"1200\",\"message\":\"User not authorized!\"}\nassert 401 == 200\n +  where 401 = <Response [401]>.status_code", "trace": "fixturefunc = <function ensure_authentication at 0x104d25300>, request = <FixtureRequest for <Function test_reservar_dois_livros_disponíveis>>, kwargs = {}\n\n    def call_fixture_func(\n        fixturefunc: _FixtureFunc[FixtureValue], request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n.venv/lib/python3.13/site-packages/_pytest/fixtures.py:898: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\n    @given(\"que estou autenticado na API\")\n    def ensure_authentication():\n        \"\"\"Garante que o usuário está autenticado e autorizado\"\"\"\n        logging.debug(f\"🔐 Verificando autenticação do usuário... ID: {pytest.user_id}, Token: {pytest.token}\")\n    \n        auth_response = APIClient.is_user_authorized(pytest.user_data[\"userName\"], pytest.user_data[\"password\"])\n        assert auth_response.status_code == 200, f\"Erro: Usuário não está autorizado! {auth_response.text}\"\n    \n        # 🚀 **Verifica se o usuário realmente existe antes de tentar reservar livros**\n        user_details = APIClient.get_user_details(pytest.user_id, pytest.token)\n>       assert user_details.status_code == 200, f\"Erro: Usuário não encontrado antes da reserva! {user_details.text}\"\nE       AssertionError: Erro: Usuário não encontrado antes da reserva! {\"code\":\"1200\",\"message\":\"User not authorized!\"}\nE       assert 401 == 200\nE        +  where 401 = <Response [401]>.status_code\n\ntests/api/test_reservation.py:19: AssertionError"}, "description": "/Users/daniloamedeiros/Desktop/project-challenge-qa-acc/features/api_reservation.feature: Reservar dois livros disponíveis", "attachments": [{"name": "log", "source": "c8449434-b050-4487-be91-f4216207a25c-attachment.txt", "type": "text/plain"}], "start": 1739369741020, "stop": 1739369742190, "uuid": "d4e9d6eb-70e6-4f99-84f1-2fc9d2e82379", "historyId": "91b126e08702aa1dbb177c0c6adc4a30", "testCaseId": "91b126e08702aa1dbb177c0c6adc4a30", "fullName": "tests.api.test_reservation#test_reservar_dois_livros_disponíveis", "labels": [{"name": "parentSuite", "value": "tests.api"}, {"name": "suite", "value": "test_reservation"}, {"name": "host", "value": "MacBook-Pro-de-Danilo.local"}, {"name": "thread", "value": "50946-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.api.test_reservation"}]}