{"name": "test_criar_um_usu√°rio_com_credenciais_v√°lidas", "status": "failed", "statusDetails": {"message": "AssertionError: ‚ùå Erro ao buscar usu√°rio criado: {\"code\":\"1200\",\"message\":\"User not authorized!\"}\nassert 401 == 200\n +  where 401 = <Response [401]>.status_code", "trace": "fixturefunc = <function verify_user_details at 0x104d70f40>, request = <FixtureRequest for <Function test_criar_um_usu√°rio_com_credenciais_v√°lidas>>, kwargs = {}\n\n    def call_fixture_func(\n        fixturefunc: _FixtureFunc[FixtureValue], request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n.venv/lib/python3.13/site-packages/_pytest/fixtures.py:898: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\n    @then(\"o usu√°rio deve ser criado com sucesso\")\n    def verify_user_details():\n        \"\"\"Verifica se o usu√°rio est√° registrado corretamente\"\"\"\n        logging.info(\"üîç Verificando se o usu√°rio foi registrado corretamente...\")\n    \n        response_json = pytest.response.json()\n        assert \"userID\" in response_json, \"‚ùå Erro: ID do usu√°rio n√£o retornado pela API\"\n        pytest.user_id = response_json[\"userID\"]\n    \n        user_details = APIClient.get_user_details(pytest.user_id, pytest.token)\n>       assert user_details.status_code == 200, f\"‚ùå Erro ao buscar usu√°rio criado: {user_details.text}\"\nE       AssertionError: ‚ùå Erro ao buscar usu√°rio criado: {\"code\":\"1200\",\"message\":\"User not authorized!\"}\nE       assert 401 == 200\nE        +  where 401 = <Response [401]>.status_code\n\ntests/api/test_create_user.py:56: AssertionError"}, "description": "/Users/daniloamedeiros/Desktop/project-challenge-qa-acc/features/api_create_user.feature: Criar um usu√°rio com credenciais v√°lidas", "attachments": [{"name": "log", "source": "4b2e6293-2869-4afd-8726-7f7762ddbb85-attachment.txt", "type": "text/plain"}], "start": 1739371088146, "stop": 1739371089413, "uuid": "b3e1c0bb-82bc-4715-a061-162a3c8f7313", "historyId": "a7574963e73b147341298284211deff8", "testCaseId": "a7574963e73b147341298284211deff8", "fullName": "tests.api.test_create_user#test_criar_um_usu√°rio_com_credenciais_v√°lidas", "labels": [{"name": "parentSuite", "value": "tests.api"}, {"name": "suite", "value": "test_create_user"}, {"name": "host", "value": "MacBook-Pro-de-Danilo.local"}, {"name": "thread", "value": "51291-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.api.test_create_user"}]}